#include<cstdio>
#include<cstdlib>
class list{
    private:
             int arr[5]={0,0,0,0,0};
             int curr=-1;
             int size=0;
    public:
             int insertion_beg(int val);
             
             int insertion_end(int val);
             
             int insertion_pos(int val,int pos);
             
             int deletion_beg();
             
             int deletion_end();
             
             int deletion_pos(int pos);
            
             int search(int val);
            
             int rotate(int k);
            
             void display();
             
             
           
};
int main()
{
    int opt;
    list list1;
    while(1){
    printf("Enter the option you want to take\n1.Insertion at the beginning\n2.Insertion at the end\n3.Insertion at the beginning\n4.Delete beginning\n5.Delete End\n6.Delete position\n7.Search\n8.Display\n9.Rotate\n10.Exit\n");
    scanf("%d",&opt);
    switch(opt)
    {
          case 1:
                  int value_beg,i1;
                  printf("Enter the Value you want to insert\n");
                  scanf("%d",&value_beg);
                  printf("\n");
                  i1=list1.insertion_beg(value_beg);
                  if(i1==0)
                  {
                    printf("The array is full\n");
                  }
                  break;
                  
          case 2:
                  int value_end,i2;
                  printf("Enter the number you want to insert\n");
                  scanf("%d",&value_end);
                  printf("\n");
                  i2=list1.insertion_end(value_end);
                  if(i2==-1)
                  {
                    printf("The array is full\n");
                  }
                  
                  break;
          case 3:
                  int value_pos,position,i3;
                  printf("Enter the number you want to insert\n");
                  scanf("%d",&value_pos);
                  printf("Enter the position you want to insert\n");
                  scanf("%d",&position);
                  printf("\n");
                  i3=list1.insertion_pos(value_pos,position);
                  if(i3==-1)
                  {
                    printf("The array is full\n");
                  }
                  break;
          case 4:
                  int var;
                  var=list1.deletion_beg();
                  if(var!=-1)
                  printf("The deleted variable is %d\n",var);
                  else{
                    printf("The list is empty\n");
                  }
                  
                  break;
          case 5:
                  int var_end;
                  var_end=list1.deletion_end();
                  if(var_end!=-1)
                  {
                  printf("The deleted variable is %d\n",var_end);
                  }
                  else
                  {
                    printf("The list is empty\n ");
                  }
                  
                  break;
          case 6:
                  int var_pos,position_del;
                  printf("Enter the position you want to delete\n");
                  scanf("%d",&position_del);
                  var_pos=list1.deletion_pos(position_del);
                  if(var_pos!=0)
                  {
                  printf("The deleted variable is %d\n",var_pos);
                  }
                  else{
                    printf("The list is empty\n");
                  }
                  break;
          case 7:
                  int val_search,index;
                  printf("Enter the number you want to search\n");
                  scanf("%d",&val_search);
                  index=list1.search(val_search);
                  if (index==-1)
                  {
                    printf("Element not found\n");
                  }
                  else
                  {
                    printf("The element is found at the index %d\n",index);
                  }
                  break;
          case 8:
                  list1.display();
                  break;
          case 9:
                  int num_times;
                  printf("How many times do you want to rotate the array\n");
                  scanf("%d",&num_times);
                  list1.rotate(num_times);
                  break;
          case 10:
                  return 0;
          default :
                    printf("Invalid Option\n");
    }
    }
    

}
int list::insertion_beg(int val)
             {
                int i;
                if(size<5)
                {
                    for(i=size;i>0;i--)
                    {
                      arr[i]=arr[i-1];
                    }
                    arr[0]=val;
                    size++;
                    curr++;
                    return 1;
                }
                else
                {
                    return 0;
                }
            
             }
int list::insertion_end(int val)
             {
                if(size<5)
                {
                    arr[size]=val;
                    size++;
                    curr++;
                    return 1;
                }
                
                else
                {
                    return -1;
                }
             }
int list::insertion_pos(int val,int pos)
             {
                int i;
                if(size<5)
                {
                    for(i=curr+1;i>pos;i--)
                    {
                        arr[i]=arr[i-1];
                    }
                    arr[pos]=val;
                    size++;
                    curr++;
                }
                else
                {
                return -1;
                }
             }
int list::deletion_beg()
             {
                int i,del_var;
                if(size>0)
                {
                    del_var=arr[0];
                    for(i=0;i<=curr;i++)
                    {
                        arr[i]=arr[i+1];
                    }
                    size--;
                    curr--;
                    return del_var;
                }
                else
                {
                     return -1;
                }
               
             }
int list::deletion_end()
             {
                int del_var;
                if(size>0)
                {
                    del_var=arr[curr];
                    arr[curr]=0;
                    size--;
                    curr--;
                    return del_var;
                }
                else{

                return -1;
                }

            }
int list::deletion_pos(int pos)
            {
                int del_var,i;
                if(size>0)
                {
                for(i=pos;i<=curr;i++)
                del_var=arr[pos];
                {
                   arr[i]=arr[i+1];
                   size--;
                    curr--;
                    return del_var;

                }
                }
                else{
                    return -1;

                }
            }
int list::search(int val)
            {
                int i;
                for(i=0;i<=curr;i++)
                {
                   if(arr[i]==val)
                   {
                        return i;

                   }
                
                }
                return -1;
            }
int list::rotate(int k)
            {
                int i,j,temp;
                for(i=0;i<k;i++)
                {
                    temp=arr[curr];
                    for(j=curr;j>0;j--)
                    {
                     arr[j]=arr[j-1];
                    }
                    arr[0]=temp;
                }
                return 1;
            }
void list::display()
             {
                int i;
                printf("The Edited array is \n");
                for(i=0;i<=curr;i++)
                {
                    printf("%d  ",arr[i]);
                }
                printf("\n");
                printf("size:%d\n",size);
                printf("current position:%d\n",curr);
             }
             
